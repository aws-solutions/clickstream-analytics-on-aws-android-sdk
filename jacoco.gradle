apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.11"
    reportsDirectory = layout.projectDirectory.dir("reports/jacoco")
}

afterEvaluate { project ->
    setupAndroidReporting(project)
}

ext {
    getFileFilter = { ->
        def jacocoSkipClasses = null
        if (project.hasProperty('jacocoSkipClasses')) {
            jacocoSkipClasses = project.property('jacocoSkipClasses')
        }
        def fileFilter = ['**/R.class', '**/R$*.class',
                          '**/BuildConfig.*', '**/Manifest*.*', '**/*$ViewInjector*.*']
        if (jacocoSkipClasses != null) {
            fileFilter.addAll(jacocoSkipClasses)
        }
        return fileFilter
    }
}

def setupAndroidReporting(Project currentProject) {
    tasks.withType(Test) {
        jacoco.includeNoLocationClasses = true
        jacoco.excludes = ['jdk.internal.*']
    }
    task jacocoTestReport(
        type: JacocoReport,
        dependsOn: [
            'testDebugUnitTest'
        ]) {
        reports {
            xml.required = true
            html.required = true
        }

        final def coverageSourceDirs = [
            "$projectDir/src/main/java"
        ]
        final def javaDebugTree = fileTree(
            dir: "$buildDir/intermediates/javac/debug/compileDebugJavaWithJavac/classes",
        )
        sourceDirectories.from = files(coverageSourceDirs)
        classDirectories.from = files(javaDebugTree)
        executionData.from = fileTree(
            dir: project.layout.buildDirectory,
            includes: ['jacoco/testDebugUnitTest.exec']
        )
    }
}